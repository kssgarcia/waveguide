"""
Mesh Processing and Format Conversion

This script processes GMSH mesh files to extract only triangular elements and
convert them to a format compatible with DOLFINx. It demonstrates how to:
- Read mesh files generated by GMSH using meshio
- Extract specific cell types (triangles) from mixed element meshes
- Preserve mesh structure and metadata during conversion
- Write processed meshes in GMSH format for FEM solvers
- Handle 3D point coordinates while working with 2D triangular elements

This is useful for cleaning up meshes and ensuring compatibility with
finite element libraries that expect specific element types.

@author: kssgarcia
"""
# %%
import meshio
from meshio import CellBlock
import numpy as np

folder = "../../meshes/"
file_name = "mesh_with_perturbed_hole"

# Read the original mesh
mesh = meshio.read(f"{folder}{file_name}.msh")

# Extract points (keep all 3 dimensions for proper mesh structure)
points = mesh.points

# Get triangle data
triangle_data = mesh.get_cells_type("triangle")

# Create CellBlock properly - this is the correct format
triangle_cells = [CellBlock("triangle", triangle_data)]

# Create the new mesh with proper structure
mesh_tri_only = meshio.Mesh(
    points=points,  # Keep 3D points
    cells=triangle_cells,
    # Copy over any relevant data from original mesh
    point_data=mesh.point_data if hasattr(mesh, 'point_data') else {},
    cell_data={} if not hasattr(mesh, 'cell_data') else {
        key: [val for i, val in enumerate(values) if mesh.cells[i].type == "triangle"]
        for key, values in mesh.cell_data.items()
    }
)

# Write the mesh with explicit format for better compatibility
meshio.write(f"{folder}{file_name}.msh", mesh_tri_only, file_format="gmsh22")

print(f"Original mesh: {len(mesh.points)} points, {len(mesh.cells)} cell blocks")
print(f"Triangle-only mesh: {len(mesh_tri_only.points)} points, {len(mesh_tri_only.cells)} cell blocks")
print(f"Number of triangles: {len(triangle_data)}")

# @author: kssgarcia
